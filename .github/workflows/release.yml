name: kubex_go_release

on:
  push:
    tags:
      - "v*.*.*"  # Só será executado com push de tag: git push origin vX.Y.Z
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  kubex_go_release:
    runs-on: ubuntu-latest
    steps:
      - name: Install UPX and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y upx zip tar curl gzip
          sudo apt-get install -y "$(sudo apt-cache show 'libzmq[1-9]-dev' | grep '^Package: ' | uniq | head -n1 | awk '{print $2}')"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Garante acesso às tags

      - name: Cache Go
        uses: actions/cache@v3
        with:
          path: "${{ runner.tool_cache }}/go"
          key: ${{ runner.os }}-go-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go
        run: |
          export NON_INTERACTIVE=true
          bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/faelmori/gosetup/refs/heads/main/go.sh')" -s --version "$(grep '^go ' go.mod | awk '{print $2}')"

      - name: Verify Go Installation
        run: go version

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ${{ github.workspace }}/7go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Go Mod Tidy
        run: go mod tidy

      - name: Debug GITHUB_REF
        run: echo "GITHUB_REF=${GITHUB_REF}"

      - name: Set version
        id: set_version
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          mkdir -p "$(realpath ./)/version"
          echo -n "$TAG" > "$(realpath ./)/version/CLI_VERSION"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set env for binary name
        id: set_bin_name
        run: |
          MOD_NAME=$(awk '/^module /{print $2}' go.mod | awk -F'/' '{print $NF}')
          BIN_NAME="${MOD_NAME}_linux_amd64"
          echo "BIN_NAME=$BIN_NAME" >> $GITHUB_ENV

      - name: Build
        run: |
          MOD_NAME=$(awk '/^module /{print $2}' go.mod | awk -F'/' '{print $NF}')
          BIN_NAME="${MOD_NAME}_linux_amd64"
          go build -ldflags "-s -w -X main.version=${GITHUB_REF#refs/tags/} -X main.commit=$(git rev-parse HEAD) -X main.date=$(date +%Y-%m-%d)" -trimpath -o "$BIN_NAME" "$(dirname $(grep -risn '^package main' $(realpath ./) | head -n1 | awk -F ':' '{print $1}'))"

      - name: Compress with UPX
        run: |
          MOD_NAME=$(awk '/^module /{print $2}' go.mod | awk -F'/' '{print $NF}')
          BIN_NAME="${MOD_NAME}_linux_amd64"
          upx "$BIN_NAME" --force-overwrite --lzma --no-progress --no-color -qqq
          tar -czvf "$BIN_NAME.tar.gz" "$BIN_NAME" --remove-files
          sha256sum "$BIN_NAME.tar.gz" > "$BIN_NAME.tar.gz.sha256"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_version.outputs.tag }}
          release_name: Release ${{ steps.set_version.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BIN_NAME }}.tar.gz
          asset_name: ${{ env.BIN_NAME }}.tar.gz
          asset_content_type: application/gzip

      - name: Clean Go Build Cache
        run: go clean -cache -modcache -i -r
